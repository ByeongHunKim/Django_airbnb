# Django project는 application으로 나누어져있다.

# Django의 apps의 관한 개념

# 로그인, 이메일 주소확인, 프로필 확인, 로그아웃과 같은 이런 모든 로직을 room 로직과 같은 파일에 user 로직을 둘 것이냐?
# room 로직은 room을 검색하고 room 정보를 보고, 그걸 수정하고 삭제, room 업로드한다. 
# 이렇게 다른 기능을 하기 때문에, user로직을 위한 파일과 room 로직을 위한 파일을 분리하는게 맞다.

# 데이터도 마찬가지이다. 우린 데이터베이스의 한 테이블에는 user 데이터를 넣고 마찬가지로 다른 테이블에는 room 데이터를 넣는다.

# 이게 바로 Django App이다. 어플리케이션의 로직과 데이터를 합쳐서 캡슐화 한다.
# 개발자는 더 잘 정리하기 위해 그것들을 어떻게 분리할지만 정하면 된다.

"""
준비해둔 coldChain에 userAPI application안의 models.py를 기획에 명시된 회원가입쪽을 보고 컬럼 수정 + [sequelizer.py] 수정 → 데이터 받아서 create-user

몇개의 application으로 나눠야할 것인가? airbnb는 예를 들어 예약, 좋아요 누른것들, 메시지, 채팅방 등등 

나는 ? 예약 대신에 배송(의약품배송)  

어플리케이션 나누기  + 어플리케이션과 연관되어있는 것들은 ..? 

다른 종류의 데이터와 다른 종류의 로직이니까 분리시킨다

Django에서 application을 모듈을 생각하는 것처럼 보면 된다.

기획서 또는 특정사이트를 보고 각각 분리할 수 있는 모듈이 무엇일지 찾아보려고 해봐야한다. → 별개의 폴더에 캡슐화 하는 것

하지만 별개의 폴더(application)들이 서로 연결되어있지 않다는 것은 아니다. 별개의 원자로써 정리하겠다는 의미

이렇듯 모듈화는 어플리케이션을 좀 더 정리되게끔 만들어준다.
"""